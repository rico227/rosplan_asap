<?xml version="1.0"?>
<launch>
	<!-- PDDL Arguments -->
	<arg name="domain_path"	 default="$(find asap)/planner_model/domain.pddl" />
	<arg name="initial_state" default="$(find asap)/planner_model/problem.pddl" />
	<arg name="autom_gen_problem_path" default="$(find asap)/planner_model/problemGEN.pddl" />
	<arg name="data_path"	 default="$(find asap)/planner_model/" />

	<!-- Arguments -->
    <arg name="model"             default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="map_file"          default="$(find asap)/simulation_model/maps/map.yaml"/>
    <arg name="world_file"        default="$(find asap)/simulation_model/worlds/asap.world"/>
    <arg name="common_param_file" default="$(find asap)/config/costmap_common_params.yaml"/>
    <arg name="local_param_file"  default="$(find asap)/config/local_costmap_params.yaml"/>
    <arg name="global_param_file" default="$(find asap)/config/global_costmap_params.yaml"/>
    <arg name="max_prm_size"      default="40" />

	<!-- base call -->
    <include file="$(find asap)/launch/base_robot.launch" >
        <arg name="model"             value="$(arg model)" />
        <arg name="map_file"          value="$(arg map_file)"/>
        <arg name="world_file"        value="$(arg world_file)"/>
        <arg name="common_param_file" value="$(arg common_param_file)"/>
        <arg name="local_param_file"  value="$(arg local_param_file)"/>
        <arg name="global_param_file" value="$(arg global_param_file)"/>
    </include>

	<!-- visualisation of robot sensor data -->    
   	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find rosplan_turtlebot3_demo)/config/turtlebot3.rviz" />

	<!-- probabilistic roadmap generation -->
    <include file="$(find rosplan_interface_mapping)/launch/rosplan_roadmap_server.launch" >
        <arg name="wp_namespace"        value="rosplan_asap" />
        <arg name="use_static_map"      value="false" />
        <arg name="update_waypoints"    value="true" />
        <arg name="update_connectivity" value="true" />
        <arg name="wp_reference_frame"  value="/map" />
        <arg name="rosplan_kb_name"     value="rosplan_knowledge_base" />
        <arg name="costmap_topic"       value="/move_base/global_costmap/costmap" />
    </include>

	<!-- ROSPlan -->
    <include file="$(find rosplan_planning_system)/launch/interfaced_planning_system.launch" >
        <arg name="domain_path" value="$(arg domain_path)" />
        <!-- load a particular initial state into KB at startup (optional) -->
        <arg name="problem_path" value="$(arg initial_state)" />
        <!-- automatically generated pddl problem will be created here -->
        <arg name="autom_gen_problem_path" value="$(arg autom_gen_problem_path)" />
        <!-- planner will produce output plan and write to this location -->
        <arg name="data_path" value="$(arg data_path)" />
    </include>

	<!-- rosplan sensing interface -->
    <node name="rosplan_sensing_interface" pkg="rosplan_sensing_interface" type="sensing_interface.py" respawn="false" output="screen">
        <rosparam command="load" file="$(find asap)/config/sensing_interface_config.yaml" />
        <param name="main_rate"  value="10" />
    </node> 

    <!-- ActionInterfaceManager -->
    <node name="rosplan_action_interface" pkg="rosplan_action_interface" type="ActionInterfaceManager.py" respawn="false" output="screen">
        <rosparam command="load" file="$(find asap)/config/action_interface_config.yaml"/>
        <param name="knowledge_base"        value="rosplan_knowledge_base" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
    </node>

    <!-- main coordinator -->
    <node pkg="asap" type="main_executor.py" name="coordinator" respawn="false" required="false" output="screen">
        <param name="max_prm_size"    value="$(arg max_prm_size)" />
        <param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
        <param name="domain_path"     value="$(arg domain_path)" />
        <param name="problem_path"    value="$(arg autom_gen_problem_path)" />
        <param name="data_path"       value="$(arg data_path)" />

    </node>

    <!-- outputs /odom and /imu -->
    <node pkg="robot_state_publisher" name="robot_state_publisher" type="robot_state_publisher" />

    <!-- plan graph visualisation -->
    <!--<node pkg="rosplan_rqt" type="esterel_plan_viewer.py" name="esterel_plan_viewer" respawn="false" output="log" />
    <node pkg="rosplan_stage_exploration_demo" type="graph_saver.py" name="graph_saver" respawn="false" output="log">
        <param name="data_path" value="$(find rosplan_stage_exploration_demo)/pddl/exploration_plan.dot" />
    </node>  -->

</launch>
